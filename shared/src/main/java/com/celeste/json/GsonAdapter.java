package com.celeste.json;

import com.celeste.annotation.Utility;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;

@Utility
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class GsonAdapter {

    @Getter
    private static final GsonAdapter instance = new GsonAdapter();

    private final Gson gson = new GsonBuilder()
        .enableComplexMapKeySerialization()
        .create();

    /**
     * @param context Object that will be turning to json.
     * @return String Json string.
     */
    public final String toJson(final Object context) {
        return gson.toJson(context);
    }

    /**
     * @param json Json formatted string that will be turn into a object.
     * @param typeToken TypeToken with object that that String will be turn into.
     * @param <T> Class of the object that will be generated by that JSON String
     *
     * @return Object from JSON String
     */
    public final <T> T fromJson(final String json, final TypeToken<T> typeToken) {
        return gson.fromJson(json, typeToken.getType());
    }

    /**
     * @param json Json formatted string that will be turn into a object.
     * @param clazz Class of object that that String will be turn into.
     * @param <T> Class of the object that will be generated by that JSON String
     *
     * @return String Json string.
     */
    public final <T> T fromJson(final String json, final Class<T> clazz) {
        return fromJson(json, TypeToken.get(clazz));
    }

}

